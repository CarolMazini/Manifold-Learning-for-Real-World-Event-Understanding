from tqdm import tqdm
import time
import numpy as np
import scipy as sc
from sys import argv
import math
from sklearn import metrics
import shutil
import random
from PIL import Image
import PIL
import cv2
import os
import imutils




#performs randomly rotations according to a maximum angle for both sides
def random_rotate_images(image, angle_max):
    '''
    input: image to be rotated, maximum angle to perform rotation (both sides)
    output: rotated image, angle of rotation
    '''

    angle = random.randint(-angle_max, angle_max)

    rot = imutils.rotate(image, angle=angle)

    return rot, angle


#performs random zoom in 
def random_zoom(cv2Object, zoom_size_max):
    '''
    input: image as an cv2 object, maximum zoom
    output: image with zoom in, zoom value
    '''
    zoomSize = random.uniform(1.0, zoom_size_max)
    # Resizes the image/video frame to the specified amount of "zoomSize".
    # A zoomSize of "2", for example, will double the canvas size
    cv2Object = imutils.resize(cv2Object, width=int(zoomSize * cv2Object.shape[1]))
    # center is simply half of the height & width (y/2,x/2)
    center = (cv2Object.shape[0]//2,cv2Object.shape[1]//2)
    # cropScale represents the top left corner of the cropped frame (y/x)
    cropScale = (int(center[0]/zoomSize), int(center[1]/zoomSize))
    # The image/video frame is cropped to the center with a size of the original picture
    # image[y1:y2,x1:x2] is used to iterate and grab a portion of an image
    # (y1,x1) is the top left corner and (y2,x1) is the bottom right corner of new cropped frame.
    cv2Object = cv2Object[cropScale[0]:(center[0] + cropScale[0]), cropScale[1]:(center[1] + cropScale[1])]

    return cv2Object, zoomSize

#performs random crop according to a specified size
def random_crop(img, random_crop_size):
    '''
    input: image to be cropped, expected size to crop
    output: cropped image
    '''

    # Note: image_data_format is 'channel_last'
    assert img.shape[2] == 3
    height, width = img.shape[0], img.shape[1]
    dy, dx = random_crop_size
    x = random.randint(0, width - dx + 1)
    y = random.randint(0, height - dy + 1)

    img = img.astype(np.float)
    
    return img[y:(y+dy), x:(x+dx), :], x, y

#read images from a list of filenames, crop images size and save in a directory
def crop_generator(images, crop_length, name_base):
    '''
    input: list of image filenames to be cropped, size of the expected crop, name_base of the save directory
    output: ---
    '''


    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    
    for filename in images:
        image = cv2.imread(filename)
        try:
            height, width = image.shape[0], image.shape[1]
            crop_height = height//2
            crop_width = width//2
            img, x, y = random_crop(image, (crop_height, crop_width))
            # save a image using extension 
            filename = filename.split('/')[-2]+'-'+filename.split('/')[-1]
            print(name_base + 'cropped'+filename.split('.')[0]+'-'+str(x)+'-'+str(y)+'.png')
            cv2.imwrite(name_base + 'cropped'+filename.split('.')[0]+'-'+str(x)+'-'+str(y)+'.png',img) 
        except:
            pass

#read images from a list of filenames, zoom in images maximum and save in a directory
def zoom_generator(images, zoom_size_max, name_base):
    '''
    input: list of image filenames to be zoom in, size of the expected zoom in, name_base of the save directory
    output: ---
    '''

    for filename in images:
        image = cv2.imread(filename)
        try:
            img,x = random_zoom(image, zoom_size_max)
            # save a image using extension 
            filename = filename.split('/')[-2]+'-'+filename.split('/')[-1]
            print(name_base + 'zoomIn'+filename.split('.')[0]+'-'+str(x)+'.png')
            cv2.imwrite(name_base + 'zoomIn'+filename.split('.')[0]+'-'+str(x)+'.png',img) 
        except:
            pass

#read images from a list of filenames, angle rotation images maximum and save in a directory
def rotation_generator(images, angle_max, name_base):
    '''
    input: list of image filenames to be zoom in, size of the expected zoom in, name_base of the save directory
    output: ---
    '''

    for filename in images:
        image = cv2.imread(filename)
        try:
            img, x = random_rotate_images(image, angle_max)
            # save a image using extension 
            filename = filename.split('/')[-2]+'-'+filename.split('/')[-1]
            print(name_base + 'rotated'+filename.split('.')[0]+'-'+str(x)+'.png')
            cv2.imwrite(name_base + 'rotated'+filename.split('.')[0]+'-'+str(x)+'.png',img) 
        except:
            pass